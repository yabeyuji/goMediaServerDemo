// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	bytes "bytes"
	reflect "reflect"
	shared "ws/pkg/shared"

	gomock "github.com/golang/mock/gomock"
)

// MockToService is a mock of ToService interface.
type MockToService struct {
	ctrl     *gomock.Controller
	recorder *MockToServiceMockRecorder
}

// MockToServiceMockRecorder is the mock recorder for MockToService.
type MockToServiceMockRecorder struct {
	mock *MockToService
}

// NewMockToService creates a new mock instance.
func NewMockToService(ctrl *gomock.Controller) *MockToService {
	mock := &MockToService{ctrl: ctrl}
	mock.recorder = &MockToServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockToService) EXPECT() *MockToServiceMockRecorder {
	return m.recorder
}

// SvFileUpload mocks base method.
func (m *MockToService) SvFileUpload(address, fileName string, fileBody *bytes.Buffer) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SvFileUpload", address, fileName, fileBody)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SvFileUpload indicates an expected call of SvFileUpload.
func (mr *MockToServiceMockRecorder) SvFileUpload(address, fileName, fileBody interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SvFileUpload", reflect.TypeOf((*MockToService)(nil).SvFileUpload), address, fileName, fileBody)
}

// SvReceiveContent mocks base method.
func (m *MockToService) SvReceiveContent(address, funcName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SvReceiveContent", address, funcName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SvReceiveContent indicates an expected call of SvReceiveContent.
func (mr *MockToServiceMockRecorder) SvReceiveContent(address, funcName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SvReceiveContent", reflect.TypeOf((*MockToService)(nil).SvReceiveContent), address, funcName)
}

// SvSendContent mocks base method.
func (m *MockToService) SvSendContent(address string, cc *shared.CommonContent) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SvSendContent", address, cc)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SvSendContent indicates an expected call of SvSendContent.
func (mr *MockToServiceMockRecorder) SvSendContent(address, cc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SvSendContent", reflect.TypeOf((*MockToService)(nil).SvSendContent), address, cc)
}

// SvSendToAgent mocks base method.
func (m *MockToService) SvSendToAgent(agentID string, cc *shared.CommonContent) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SvSendToAgent", agentID, cc)
}

// SvSendToAgent indicates an expected call of SvSendToAgent.
func (mr *MockToServiceMockRecorder) SvSendToAgent(agentID, cc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SvSendToAgent", reflect.TypeOf((*MockToService)(nil).SvSendToAgent), agentID, cc)
}

// MockToDomain is a mock of ToDomain interface.
type MockToDomain struct {
	ctrl     *gomock.Controller
	recorder *MockToDomainMockRecorder
}

// MockToDomainMockRecorder is the mock recorder for MockToDomain.
type MockToDomainMockRecorder struct {
	mock *MockToDomain
}

// NewMockToDomain creates a new mock instance.
func NewMockToDomain(ctrl *gomock.Controller) *MockToDomain {
	mock := &MockToDomain{ctrl: ctrl}
	mock.recorder = &MockToDomainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockToDomain) EXPECT() *MockToDomainMockRecorder {
	return m.recorder
}

// ParseObject mocks base method.
func (m *MockToDomain) ParseObject(object string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseObject", object)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseObject indicates an expected call of ParseObject.
func (mr *MockToDomainMockRecorder) ParseObject(object interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseObject", reflect.TypeOf((*MockToDomain)(nil).ParseObject), object)
}
