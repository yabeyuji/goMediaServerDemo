// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package commonpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SendContentServiceClient is the client API for SendContentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SendContentServiceClient interface {
	SendContentRPC(ctx context.Context, in *SendContentRequest, opts ...grpc.CallOption) (*SendContentResponse, error)
}

type sendContentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSendContentServiceClient(cc grpc.ClientConnInterface) SendContentServiceClient {
	return &sendContentServiceClient{cc}
}

func (c *sendContentServiceClient) SendContentRPC(ctx context.Context, in *SendContentRequest, opts ...grpc.CallOption) (*SendContentResponse, error) {
	out := new(SendContentResponse)
	err := c.cc.Invoke(ctx, "/commonpb.SendContentService/SendContentRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SendContentServiceServer is the server API for SendContentService service.
// All implementations must embed UnimplementedSendContentServiceServer
// for forward compatibility
type SendContentServiceServer interface {
	SendContentRPC(context.Context, *SendContentRequest) (*SendContentResponse, error)
	mustEmbedUnimplementedSendContentServiceServer()
}

// UnimplementedSendContentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSendContentServiceServer struct {
}

func (UnimplementedSendContentServiceServer) SendContentRPC(context.Context, *SendContentRequest) (*SendContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendContentRPC not implemented")
}
func (UnimplementedSendContentServiceServer) mustEmbedUnimplementedSendContentServiceServer() {}

// UnsafeSendContentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SendContentServiceServer will
// result in compilation errors.
type UnsafeSendContentServiceServer interface {
	mustEmbedUnimplementedSendContentServiceServer()
}

func RegisterSendContentServiceServer(s grpc.ServiceRegistrar, srv SendContentServiceServer) {
	s.RegisterService(&SendContentService_ServiceDesc, srv)
}

func _SendContentService_SendContentRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendContentServiceServer).SendContentRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commonpb.SendContentService/SendContentRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendContentServiceServer).SendContentRPC(ctx, req.(*SendContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SendContentService_ServiceDesc is the grpc.ServiceDesc for SendContentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SendContentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "commonpb.SendContentService",
	HandlerType: (*SendContentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendContentRPC",
			Handler:    _SendContentService_SendContentRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common.proto",
}

// ReceiveContentServiceClient is the client API for ReceiveContentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReceiveContentServiceClient interface {
	ReceiveContentRPC(ctx context.Context, in *ReceiveContentRequest, opts ...grpc.CallOption) (*ReceiveContentResponse, error)
}

type receiveContentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReceiveContentServiceClient(cc grpc.ClientConnInterface) ReceiveContentServiceClient {
	return &receiveContentServiceClient{cc}
}

func (c *receiveContentServiceClient) ReceiveContentRPC(ctx context.Context, in *ReceiveContentRequest, opts ...grpc.CallOption) (*ReceiveContentResponse, error) {
	out := new(ReceiveContentResponse)
	err := c.cc.Invoke(ctx, "/commonpb.ReceiveContentService/ReceiveContentRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReceiveContentServiceServer is the server API for ReceiveContentService service.
// All implementations must embed UnimplementedReceiveContentServiceServer
// for forward compatibility
type ReceiveContentServiceServer interface {
	ReceiveContentRPC(context.Context, *ReceiveContentRequest) (*ReceiveContentResponse, error)
	mustEmbedUnimplementedReceiveContentServiceServer()
}

// UnimplementedReceiveContentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReceiveContentServiceServer struct {
}

func (UnimplementedReceiveContentServiceServer) ReceiveContentRPC(context.Context, *ReceiveContentRequest) (*ReceiveContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveContentRPC not implemented")
}
func (UnimplementedReceiveContentServiceServer) mustEmbedUnimplementedReceiveContentServiceServer() {}

// UnsafeReceiveContentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReceiveContentServiceServer will
// result in compilation errors.
type UnsafeReceiveContentServiceServer interface {
	mustEmbedUnimplementedReceiveContentServiceServer()
}

func RegisterReceiveContentServiceServer(s grpc.ServiceRegistrar, srv ReceiveContentServiceServer) {
	s.RegisterService(&ReceiveContentService_ServiceDesc, srv)
}

func _ReceiveContentService_ReceiveContentRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiveContentServiceServer).ReceiveContentRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/commonpb.ReceiveContentService/ReceiveContentRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiveContentServiceServer).ReceiveContentRPC(ctx, req.(*ReceiveContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReceiveContentService_ServiceDesc is the grpc.ServiceDesc for ReceiveContentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReceiveContentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "commonpb.ReceiveContentService",
	HandlerType: (*ReceiveContentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReceiveContentRPC",
			Handler:    _ReceiveContentService_ReceiveContentRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common.proto",
}

// PostFileClient is the client API for PostFile service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostFileClient interface {
	PostFileRPC(ctx context.Context, opts ...grpc.CallOption) (PostFile_PostFileRPCClient, error)
}

type postFileClient struct {
	cc grpc.ClientConnInterface
}

func NewPostFileClient(cc grpc.ClientConnInterface) PostFileClient {
	return &postFileClient{cc}
}

func (c *postFileClient) PostFileRPC(ctx context.Context, opts ...grpc.CallOption) (PostFile_PostFileRPCClient, error) {
	stream, err := c.cc.NewStream(ctx, &PostFile_ServiceDesc.Streams[0], "/commonpb.PostFile/PostFileRPC", opts...)
	if err != nil {
		return nil, err
	}
	x := &postFilePostFileRPCClient{stream}
	return x, nil
}

type PostFile_PostFileRPCClient interface {
	Send(*RequestPostFile) error
	CloseAndRecv() (*ResponsePostFile, error)
	grpc.ClientStream
}

type postFilePostFileRPCClient struct {
	grpc.ClientStream
}

func (x *postFilePostFileRPCClient) Send(m *RequestPostFile) error {
	return x.ClientStream.SendMsg(m)
}

func (x *postFilePostFileRPCClient) CloseAndRecv() (*ResponsePostFile, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ResponsePostFile)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PostFileServer is the server API for PostFile service.
// All implementations must embed UnimplementedPostFileServer
// for forward compatibility
type PostFileServer interface {
	PostFileRPC(PostFile_PostFileRPCServer) error
	mustEmbedUnimplementedPostFileServer()
}

// UnimplementedPostFileServer must be embedded to have forward compatible implementations.
type UnimplementedPostFileServer struct {
}

func (UnimplementedPostFileServer) PostFileRPC(PostFile_PostFileRPCServer) error {
	return status.Errorf(codes.Unimplemented, "method PostFileRPC not implemented")
}
func (UnimplementedPostFileServer) mustEmbedUnimplementedPostFileServer() {}

// UnsafePostFileServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostFileServer will
// result in compilation errors.
type UnsafePostFileServer interface {
	mustEmbedUnimplementedPostFileServer()
}

func RegisterPostFileServer(s grpc.ServiceRegistrar, srv PostFileServer) {
	s.RegisterService(&PostFile_ServiceDesc, srv)
}

func _PostFile_PostFileRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PostFileServer).PostFileRPC(&postFilePostFileRPCServer{stream})
}

type PostFile_PostFileRPCServer interface {
	SendAndClose(*ResponsePostFile) error
	Recv() (*RequestPostFile, error)
	grpc.ServerStream
}

type postFilePostFileRPCServer struct {
	grpc.ServerStream
}

func (x *postFilePostFileRPCServer) SendAndClose(m *ResponsePostFile) error {
	return x.ServerStream.SendMsg(m)
}

func (x *postFilePostFileRPCServer) Recv() (*RequestPostFile, error) {
	m := new(RequestPostFile)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PostFile_ServiceDesc is the grpc.ServiceDesc for PostFile service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostFile_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "commonpb.PostFile",
	HandlerType: (*PostFileServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PostFileRPC",
			Handler:       _PostFile_PostFileRPC_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "common.proto",
}
