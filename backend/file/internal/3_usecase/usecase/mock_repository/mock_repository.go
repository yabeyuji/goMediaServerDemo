// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	domain "file/internal/4_domain/domain"
	shared "file/pkg/shared"
	os "os"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockToService is a mock of ToService interface.
type MockToService struct {
	ctrl     *gomock.Controller
	recorder *MockToServiceMockRecorder
}

// MockToServiceMockRecorder is the mock recorder for MockToService.
type MockToServiceMockRecorder struct {
	mock *MockToService
}

// NewMockToService creates a new mock instance.
func NewMockToService(ctrl *gomock.Controller) *MockToService {
	mock := &MockToService{ctrl: ctrl}
	mock.recorder = &MockToServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockToService) EXPECT() *MockToServiceMockRecorder {
	return m.recorder
}

// SvExecCommand mocks base method.
func (m *MockToService) SvExecCommand(value []string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SvExecCommand", value)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SvExecCommand indicates an expected call of SvExecCommand.
func (mr *MockToServiceMockRecorder) SvExecCommand(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SvExecCommand", reflect.TypeOf((*MockToService)(nil).SvExecCommand), value)
}

// SvReadJSONFile mocks base method.
func (m *MockToService) SvReadJSONFile(filePath string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SvReadJSONFile", filePath)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SvReadJSONFile indicates an expected call of SvReadJSONFile.
func (mr *MockToServiceMockRecorder) SvReadJSONFile(filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SvReadJSONFile", reflect.TypeOf((*MockToService)(nil).SvReadJSONFile), filePath)
}

// SvSendContent mocks base method.
func (m *MockToService) SvSendContent(address string, cc *shared.CommonContent) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SvSendContent", address, cc)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SvSendContent indicates an expected call of SvSendContent.
func (mr *MockToServiceMockRecorder) SvSendContent(address, cc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SvSendContent", reflect.TypeOf((*MockToService)(nil).SvSendContent), address, cc)
}

// SvUploadFile mocks base method.
func (m *MockToService) SvUploadFile(filePath string, chunks *[]byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SvUploadFile", filePath, chunks)
	ret0, _ := ret[0].(error)
	return ret0
}

// SvUploadFile indicates an expected call of SvUploadFile.
func (mr *MockToServiceMockRecorder) SvUploadFile(filePath, chunks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SvUploadFile", reflect.TypeOf((*MockToService)(nil).SvUploadFile), filePath, chunks)
}

// SvWriteJSONFile mocks base method.
func (m *MockToService) SvWriteJSONFile(filePath string, data []byte, perm os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SvWriteJSONFile", filePath, data, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// SvWriteJSONFile indicates an expected call of SvWriteJSONFile.
func (mr *MockToServiceMockRecorder) SvWriteJSONFile(filePath, data, perm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SvWriteJSONFile", reflect.TypeOf((*MockToService)(nil).SvWriteJSONFile), filePath, data, perm)
}

// MockToDomain is a mock of ToDomain interface.
type MockToDomain struct {
	ctrl     *gomock.Controller
	recorder *MockToDomainMockRecorder
}

// MockToDomainMockRecorder is the mock recorder for MockToDomain.
type MockToDomainMockRecorder struct {
	mock *MockToDomain
}

// NewMockToDomain creates a new mock instance.
func NewMockToDomain(ctrl *gomock.Controller) *MockToDomain {
	mock := &MockToDomain{ctrl: ctrl}
	mock.recorder = &MockToDomainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockToDomain) EXPECT() *MockToDomainMockRecorder {
	return m.recorder
}

// AddtoFiles mocks base method.
func (m *MockToDomain) AddtoFiles(files []domain.File, vid, name string) []domain.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddtoFiles", files, vid, name)
	ret0, _ := ret[0].([]domain.File)
	return ret0
}

// AddtoFiles indicates an expected call of AddtoFiles.
func (mr *MockToDomainMockRecorder) AddtoFiles(files, vid, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddtoFiles", reflect.TypeOf((*MockToDomain)(nil).AddtoFiles), files, vid, name)
}

// FilepathJoin mocks base method.
func (m *MockToDomain) FilepathJoin(strings ...string) string {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range strings {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FilepathJoin", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// FilepathJoin indicates an expected call of FilepathJoin.
func (mr *MockToDomainMockRecorder) FilepathJoin(strings ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilepathJoin", reflect.TypeOf((*MockToDomain)(nil).FilepathJoin), strings...)
}

// GetValidFiles mocks base method.
func (m *MockToDomain) GetValidFiles(files *[]domain.File) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidFiles", files)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetValidFiles indicates an expected call of GetValidFiles.
func (mr *MockToDomainMockRecorder) GetValidFiles(files interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidFiles", reflect.TypeOf((*MockToDomain)(nil).GetValidFiles), files)
}

// IsExistFilePath mocks base method.
func (m *MockToDomain) IsExistFilePath(filePath string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExistFilePath", filePath)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExistFilePath indicates an expected call of IsExistFilePath.
func (mr *MockToDomainMockRecorder) IsExistFilePath(filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExistFilePath", reflect.TypeOf((*MockToDomain)(nil).IsExistFilePath), filePath)
}

// IsExistVid mocks base method.
func (m *MockToDomain) IsExistVid(files *[]domain.File, vid string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExistVid", files, vid)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExistVid indicates an expected call of IsExistVid.
func (mr *MockToDomainMockRecorder) IsExistVid(files, vid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExistVid", reflect.TypeOf((*MockToDomain)(nil).IsExistVid), files, vid)
}

// JSONMarshal mocks base method.
func (m *MockToDomain) JSONMarshal(files *[]domain.File) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONMarshal", files)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JSONMarshal indicates an expected call of JSONMarshal.
func (mr *MockToDomainMockRecorder) JSONMarshal(files interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONMarshal", reflect.TypeOf((*MockToDomain)(nil).JSONMarshal), files)
}

// JSONMarshalIndent mocks base method.
func (m *MockToDomain) JSONMarshalIndent(files *[]domain.File) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONMarshalIndent", files)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JSONMarshalIndent indicates an expected call of JSONMarshalIndent.
func (mr *MockToDomainMockRecorder) JSONMarshalIndent(files interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONMarshalIndent", reflect.TypeOf((*MockToDomain)(nil).JSONMarshalIndent), files)
}

// JSONUnmarshal mocks base method.
func (m *MockToDomain) JSONUnmarshal(raw []byte, files *[]domain.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONUnmarshal", raw, files)
	ret0, _ := ret[0].(error)
	return ret0
}

// JSONUnmarshal indicates an expected call of JSONUnmarshal.
func (mr *MockToDomainMockRecorder) JSONUnmarshal(raw, files interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONUnmarshal", reflect.TypeOf((*MockToDomain)(nil).JSONUnmarshal), raw, files)
}

// ParseMessage mocks base method.
func (m *MockToDomain) ParseMessage(message string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseMessage", message)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseMessage indicates an expected call of ParseMessage.
func (mr *MockToDomainMockRecorder) ParseMessage(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseMessage", reflect.TypeOf((*MockToDomain)(nil).ParseMessage), message)
}

// StrconvFormatBool mocks base method.
func (m *MockToDomain) StrconvFormatBool(value bool) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StrconvFormatBool", value)
	ret0, _ := ret[0].(string)
	return ret0
}

// StrconvFormatBool indicates an expected call of StrconvFormatBool.
func (mr *MockToDomainMockRecorder) StrconvFormatBool(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StrconvFormatBool", reflect.TypeOf((*MockToDomain)(nil).StrconvFormatBool), value)
}

// ToggleFiles mocks base method.
func (m *MockToDomain) ToggleFiles(files []domain.File, vid string) []domain.File {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToggleFiles", files, vid)
	ret0, _ := ret[0].([]domain.File)
	return ret0
}

// ToggleFiles indicates an expected call of ToggleFiles.
func (mr *MockToDomainMockRecorder) ToggleFiles(files, vid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToggleFiles", reflect.TypeOf((*MockToDomain)(nil).ToggleFiles), files, vid)
}
